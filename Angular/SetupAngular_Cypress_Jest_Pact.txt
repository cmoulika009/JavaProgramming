https://nodejs.org/en/download/

Set-ExecutionPolicy RemoteSigned -Scope CurrentUser --> Issue in VS to access ng command

npm install -g @angular/cli

ng new my-first-app

ng g c my-component

ng generate service my -service

npm install --save bootstrap
angular.json under styles add "./node_modules/bootstrap/dist/css/bootstrap.css"
Angular: https://www.youtube.com/watch?v=K5OLlmuSTA8&list=PL8p2I9GklV444GIc2VehqDw2W_9At0OKE

https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell
npm install cypress --save-dev
npx cypress open
in package.json change --> "e2e": "cypress open"
Cypress test on REST API: https://www.youtube.com/watch?v=3q4l3wzFiMI

https://www.amadousall.com/how-to-set-up-angular-unit-testing-with-jest/
https://www.xfive.co/blog/testing-angular-faster-jest/
npm install jest jest-preset-angular @types/jest --save-dev
1. Create the jest.config.js in root
2. Modify src/test.ts
3. Update the content of the tsconfig.spec.json file
4. npx jest

Consumer Driver Pact Approach --> JSON consume the expectations
Pact solves the problem of keeping the two sets of tests in sync by use of a "contract", also known as a "pact".
During the consumer tests, each request made to a Pact mock provider is recorded into the contract file, along with its expected response.
consumer then replays each request against the real provider, and compares the actual and expected responses

https://docs.pact.io/
https://www.youtube.com/watch?v=wkld_wRsTDE
https://github.com/BudacaB/yt/blob/master/pact/consumer/src/app/cars/car.service.pact.spec.ts
npm install --save-dev @angular-builders/jest @pact-foundation/pact @pact-foundation/pact-node @types/jest jest jest-preset-angular

Akita: Managing State
https://blog.ng-book.com/managing-state-in-angular-using-akita/
