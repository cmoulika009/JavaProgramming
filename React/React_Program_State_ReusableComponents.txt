function Button(props){
  const handleClick = () =>  props.onClickFunction(props.increment);
  //Refence and invocation
  return (
   <button onClick={handleClick}>
      +{props.increment}
   </button>
  );
}

function Hello(){
  return <div>Hello</div>;
}

function Display(props){
  return <div>{props.message}</div>;
}

function App(){
  //useState is a hook that allows you to have state variables in functional components
  const [counter,setCounter] = useState(0)
  const incrementCounter = (incrementValue) => setCounter(counter+incrementValue);
  return(
  <div>
  <Hello/>
  <Button onClickFunction={incrementCounter} increment={1}/>
  <Button onClickFunction={incrementCounter} increment={5}/>
  <Button onClickFunction={incrementCounter} increment={10}/>
  <Button onClickFunction={incrementCounter} increment={100}/>
  <Display message={counter}/>
  </div>
  );
}
ReactDOM.render(
  /*<React.Fragment>
    <Hello/>
    <Button/>
  </React.Fragment>,*/
  <App/>,
  document.getElementById('mountNode'),
  //mountNode is a DOM node which you are telling ReactDOM to render the component into.
);